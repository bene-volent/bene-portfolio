@import url('https://fonts.googleapis.com/css2?family=JetBrains+Mono&display=swap');


$screenSize: (
    lg: 1120px,
    md: 768px,
    sm: 500px
);

@mixin mq($breakpoint: md) {
    @media (width > map-get($screenSize, $breakpoint)) {
        @content;
    }
}

@mixin dark() {
    body[data-theme="dark"] & {
        @content;
    }
}

.content {

    display: grid;

    // Experimenting
    /* For all <code> */
    code {
        font-family: 'JetBrains Mono', monospace;
        font-size: inherit;
    }

    /* Code in text */
    p>code,
    li>code,
    dd>code,
    td>code {
        word-wrap: break-word;
        -webkit-box-decoration-break: clone;
                box-decoration-break: clone;

    }

    pre code {
        display: block;
        background: none;
        white-space: pre;
        -webkit-overflow-scrolling: touch;
        overflow-x: visible;
        overflow-y: hidden;
                max-width: 100%;
        min-width: 100px;
        // padding: 0;

        padding: var(--size-2);
        border: 1px solid hsl(var(--primary));
        // font-size: var(--size-4);
        margin-bottom: var(--size-4);
        background-color: hsl(var(--secondary));

        border-radius: var(--size-2);

        
        @include mq(sm) {
            // max-width: 90%;
            margin-inline: 0;
            padding: var(--size-3);
        }

        @include mq() {
            padding: var(--size-4);
            max-width: 100%;
        }

        &::-webkit-scrollbar {
            // width: 1px;
            height: 5px;
        }

        /* Track */
        &::-webkit-scrollbar-track {
            background: transparent;
        }

        /* Handle */
        &::-webkit-scrollbar-thumb {
            background: hsl(var(--accent));
            border-radius: var(--size-2);
        }
       
    }

    h2 {
        margin-top: 1.25em;

        @include mq() {
            font-size: var(--size-7);
        }
    }

    p {
        font-size: 16px;

        @include mq() {
            font-size: calc(var(--size-4) + (var(--size-1) / 2));
        }

        @include mq(lg) {
            font-size: calc(var(--size-5));
        }
    }

    h2+p {
        margin-top: 1em;
    }

    p+p {
        margin-top: 0.75em;
    }

    img,
    video,
    svg {
        margin-block: var(--size-4);
        border-radius: var(--size-1);
    }

    ol,
    ul,
    dl {
        margin-top: var(--size-3);
    }

    ul li {
        &::marker {
            color: hsl(var(--accent));

            @include dark() {
                color: hsl(var(--text));
            }
        }
    }

    ol li {
        &::marker {
            font-size: 1.25em;
            font-weight: 600;
            color: hsl(var(--accent));

            @include dark() {
                color: hsl(var(--text));
            }
        }
    }

    hr {
        margin-block: var(--size-2);
    }

    pre,pre:has(code){
        overflow-x: visible;
        overflow-y: hidden;
       

    }


    *+pre {
        margin-top: var(--size-4);
    }

    p code {
        background-color: hsl(var(--secondary));
        padding: var(--size-1);
        font-weight: 400;
        font-size: var(--size-3);

        @include mq(sm) {
            font-size: var(--size-4)
        }

    }

    a:not([href^="#"]) {
        text-decoration: underline;

        color: rgb(79, 93, 255);



        &:hover {
            text-underline-offset: 0.25em;
        }

    }

    .contains-task-list {
        list-style: none;
        padding-left: 0;


    }
}